[{"categories":["代码配置管理"],"content":" Git 是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型的所有项目。 ","date":"2024-06-08","objectID":"/quick-start-git/:0:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#"},{"categories":["代码配置管理"],"content":"\r1 快速开始","date":"2024-06-08","objectID":"/quick-start-git/:0:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#1-快速开始"},{"categories":["代码配置管理"],"content":"\r1.1 环境初始化安装 Git 下载 Windows Setup 并安装（安装时一直Next到安装完成） 初始化本地仓库 powershell git init\r","date":"2024-06-08","objectID":"/quick-start-git/:1:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#11-环境初始化"},{"categories":["代码配置管理"],"content":"\r1.2 个人信息配置优先级：local \u003e global \u003e system global参数表示配置的是当前主机用户，配置信息保存在用户的家目录下.gitconfig文件中 local（默认参数）参数表示配置的是当前项目目录，配置信息保存在当前目录.git/config文件中 system参数表示配置系统所有用户 powershell # 查看所有配置信息 git config --list # 配置当前主机的git用户名和邮件地址 git config --global user.name \"xxx\" git config --global user.email xxx@example.com # 清除配置信息 git config --unset --local user.name\r","date":"2024-06-08","objectID":"/quick-start-git/:2:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#12-个人信息配置"},{"categories":["代码配置管理"],"content":"\r1.3 创建新仓库","date":"2024-06-08","objectID":"/quick-start-git/:3:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#13-创建新仓库"},{"categories":["代码配置管理"],"content":"\r基于空目录创建本地仓库\rpowershell git init\r","date":"2024-06-08","objectID":"/quick-start-git/:3:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#基于空目录创建本地仓库"},{"categories":["代码配置管理"],"content":"\r基于已有仓库创建新仓库可以通过git clone命令直接从远程主机的代码仓库里面完整的复制一份网络上的项目代码。 powershell # clone git clone https://github.com/xxx/xxx.git # 自定义clone仓库名称 git clone https://github.com/xxx/xxx.git yyy # 只clone仓库基本信息 git clone https://github.com/xxx/xxx.git yyy --bare\r","date":"2024-06-08","objectID":"/quick-start-git/:3:2","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#基于已有仓库创建新仓库"},{"categories":["代码配置管理"],"content":"\r1.4 git 命令补全 下载：git-completion.bash 在 home 目录下创建 .git-completion.bash 文件：mv git-completion.bash ~/.git-completion.bash 在 /etc/profile.d 目录下创建 gitbash.sh 文件：vim gitbash.sh 以下内容写入 gitbash.sh： powershell #!/bin/bash # set git bash source ~/.git-completion.bash\r","date":"2024-06-08","objectID":"/quick-start-git/:4:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#14-git-命令补全"},{"categories":["代码配置管理"],"content":"\r1.5 命令查询\rpowershell # 查询常用的命令 git help # 查询子命令的信息 git help sub_command # 查询所有的命令 git help -a git help -g\r","date":"2024-06-08","objectID":"/quick-start-git/:5:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#15-命令查询"},{"categories":["代码配置管理"],"content":"\r1.6 数据结构","date":"2024-06-08","objectID":"/quick-start-git/:6:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#16-数据结构"},{"categories":["代码配置管理"],"content":"\r数据结构Git有两种数据结构： 索引（index/stage/cache）：用于缓存工作目录信息与下一次提交的版本信息，它是可变的。 对象数据库（ObjectDB）：仅以追加形式来存储各种信息，它是不变的。包含以下四类对象： blob：它是一个文件的内容。没有适当的文件名、时间戳、或其他元数据。（git add 创建） tree：它包含文件名列表、文件类型、文件和blob或tree对象的引用。tree对象是源树的快照。（git commit 创建） commit：与tree对象组合成历史记录。包含根文件到当前文件的属性信息（名称、时间戳、log等）。（git commit 创建） tag：主要是一个对象间的引用关系，通常它用于追溯的特定版本数据的一个commt对象的数字签名。（git tag 创建） Git 数据结构 ","date":"2024-06-08","objectID":"/quick-start-git/:6:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#数据结构"},{"categories":["代码配置管理"],"content":"\r数据对象 blob： 在git仓库所在工作目录中创建一个文件时，使用git add添加文件，其实该动作就是将文件信息和内容压缩成了一个二进制文件(git对象blob)，并将对象保存到本地仓库的对象目录(.git/objects)。 tree commit tag： tag 对象是版本控制管理中的一个非常重要的标志，它和某个指定的 commit 对象有一个关联关系。 powershell # 查看仓库基本状况 git status # 添加到缓存区 git add . # 查看文件类型 git cat-file -t hashcode # 查看文件内容 git cat-file -p hashcode # 根据当前目录结构生成 tree 对象 git write-tree # 根据元数据和 tree 对象生成 commit 对象 git commit-tree # 提交变更生成 commit 对象 git commit -m \"test\" # 为 commit 对象生成 tag 标签 git tag v0.1\r","date":"2024-06-08","objectID":"/quick-start-git/:6:2","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#数据对象"},{"categories":["代码配置管理"],"content":"\r1.6 区域管理区域管理是在使用git进行代码版本控制的过程中，实现文件数据移动/保存的几个位置。主要包含以下四个区域： 工作目录（working directory）/data/git（不包含.git） 暂存区域（staging area）/data/git/.git/index 本地仓库（repository-local）/data/git/.git 远程仓库（repository-remote）git://path/to/project.git 这四个区域物理上存在于两个地方： 当前主机：工作目录、暂存区域、本地仓库，即初始化的git目录 远程主机：远程仓库，即远程代码仓库 Git 区域简介 区域设置 git init 时会自动创建三个区域：工作目录、暂存区域、本地仓库 git 服务部署时会设置远程仓库 ","date":"2024-06-08","objectID":"/quick-start-git/:7:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#16-区域管理"},{"categories":["代码配置管理"],"content":"\r1.7 文件状态git 工具在对文件进行版本管理的过程中，文件主要有以下几种状态： untracked（未跟踪） unmodified（未修改） modified（已修改） staged（已暂存） Git 文件状态变化示意图 powershell # 查看并删除缓存区的文件 git ls-files --stage git rm --cache \u003cfile\u003e # 查看日志 git log\r","date":"2024-06-08","objectID":"/quick-start-git/:8:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#17-文件状态"},{"categories":["代码配置管理"],"content":"\r2 git 基础操作","date":"2024-06-08","objectID":"/quick-start-git/:0:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#2-git-基础操作"},{"categories":["代码配置管理"],"content":"\r2.1 区域操作简介","date":"2024-06-08","objectID":"/quick-start-git/:1:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#21-区域操作简介"},{"categories":["代码配置管理"],"content":"\r常见命令 git clone：远程主机 -\u003e 本机主机，包括所有配置信息 –bare：只获取仓库信息 git pull：远程仓库 -\u003e 工作目录，只获取最新代码，并纳入本地仓库管理 git fetch：远程仓库 -\u003e 工作目录，只获取最新代码，不纳入本地仓库管理 git push：本地仓库 -\u003e 远程仓库 git add：工作目录 -\u003e 暂存区 git commit：暂存区 -\u003e 本地仓库 git reset：本地仓库 -\u003e 暂存区 or 工作目录 git checkout：本地仓库 -\u003e 工作目录 git rm：暂存区 -\u003e 工作目录 ","date":"2024-06-08","objectID":"/quick-start-git/:1:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#常见命令"},{"categories":["代码配置管理"],"content":"\r2.2 获取文件：git clone / pull / fetch git clone git clone 支持多种协议，除了 HTTPs 以外，还支持 SSH、Git、本地文件协议等 该命令一般只执行一次 powershell cd /data/clone git clone https://github.com/git/git.git\rgit fetch 远程仓库 -\u003e 工作目录，只获取最新代码，不纳入本地仓库管理 该命令必须在指定的本地仓库所在的工作目录下执行 powershell cd /data/clone/git git fetch\rgit pull 远程仓库 -\u003e 工作目录，只获取最新代码，并纳入本地仓库管理 该命令必须在指定的本地仓库所在的工作目录下执行 powershell cd /data/clone/git git pull\r","date":"2024-06-08","objectID":"/quick-start-git/:2:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#22-获取文件git-clone--pull--fetch"},{"categories":["代码配置管理"],"content":"\r2.3 增加和提交：git add / commit git add 工作目录 -\u003e 暂存区 powershell # 保存所有的修改 git add -A # 保存新的添加和修改，但不包括删除（1.x版本），只针对当前目录 git add . # 保存修改和删除，但不包括新建文件 git add -u\rgit commit powershell # 提交缓存区的文件 -\u003e 本地仓库 git commit -m \"commit\" # 提交所有本地目录已跟踪的文件 git commit -am \"commit\"\rgit rebase -i \u003ccommit_id\u003e 不建议修改最新的一条信息 powershell # 修改提交注释 git commit -m \"ccccommit\" git log --graph --oneline git rebase -i \u003ccommit_id\u003e # 使用reword修改注释并提交\r","date":"2024-06-08","objectID":"/quick-start-git/:3:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#23-增加和提交git-add--commit"},{"categories":["代码配置管理"],"content":"\r2.4 文件区别：git diff git diff 保证提交代码时，文件修改是合规的 powershell # 查看工作目录与暂存区文件的区别 git diff # 查看本地仓库与暂存区文件的区别 git diff --cached\r","date":"2024-06-08","objectID":"/quick-start-git/:4:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#24-文件区别git-diff"},{"categories":["代码配置管理"],"content":"\r2.5 删除和移动：git rm / mv","date":"2024-06-08","objectID":"/quick-start-git/:5:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#25-删除和移动git-rm--mv"},{"categories":["代码配置管理"],"content":"\r删除文件要从 Git 中移除某个文件，不但要从当前工作目录删除，还要从git版本管理中删除，涉及三个区域：工作目录、暂存区、本地仓库 git rm 要删除已添加暂存区的文件：先删除暂存区，再删除工作目录 powershell # 删除暂存区的文件 git rm --cached \u003cfile\u003e # 删除工作目录文件 rm -f \u003cfile\u003e\r要删除已提交本地仓库的文件：先删除工作目录，再删除本地仓库，最后提交删除操作 powershell # 删除工作目录文件 rm -f \u003cfile\u003e # 删除本地仓库的文件 git rm \u003cfile\u003e # 提交删除 git commit -m \"delete \u003cfile\u003e\"\r","date":"2024-06-08","objectID":"/quick-start-git/:5:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#删除文件"},{"categories":["代码配置管理"],"content":"\r移动或重命名文件要在 Git 中移动某个文件，但是git并不跟踪文件移动的操作，即使文件重命名，git的元数据也不会显示这是改名操作，但是git会推算出来。涉及到三个区域：工作目录、暂存区、本地仓库。 git mv 用于移动或重命名文件 powershell # 文件改名并提交 git mv \u003cfile_name\u003e \u003cmodified_file_name\u003e git commit -m \"modify \u003cfile\u003e\" # 移动到新目录 git mv \u003cfile\u003e \u003cdirectory\u003e git commit -m \"move \u003cfile\u003e to \u003cdirectory\u003e\"\r","date":"2024-06-08","objectID":"/quick-start-git/:5:2","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#移动或重命名文件"},{"categories":["代码配置管理"],"content":"\r2.6 查看提交记录：git log\rpowershell # 查看前 n 条记录 git log -n # 查看前 n 条的详细记录 git log -n -p # 查看简要的增改行数统计 git -log --stat -n # 常用的显示效果 git log --pretty=oneline -n git log --pretty=short -n git log --pretty=full -n git log --pretty=fuller -n # 自定义显示 git log --pretty=format:\"%h - %an, %ar : %s\" -n # 分支场景下常用 git log --pretty=oneline --graph git log --pretty=oneline --graph --all # 推荐使用方法 git log --all --oneline --graph\r","date":"2024-06-08","objectID":"/quick-start-git/:6:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#26-查看提交记录git-log"},{"categories":["代码配置管理"],"content":"\r2.7 文件级别撤销：git reset / checkout / commit根据撤销对象的状态不同，撤销操作有三种：撤销提交、撤销暂存、撤销修改 ","date":"2024-06-08","objectID":"/quick-start-git/:7:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#27-文件级别撤销git-reset--checkout--commit"},{"categories":["代码配置管理"],"content":"\r2.7.1 撤销提交： git commit –amend撤销上一次提交操作，重新将正确的文件提交到本地仓库，并且两次提交在提交日志中只记录一次修正的提交。 powershell # 撤销提交 git commit --amend -m \"amend commit\"\r","date":"2024-06-08","objectID":"/quick-start-git/:7:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#271-撤销提交-git-commit---amend"},{"categories":["代码配置管理"],"content":"\r2.7.2 撤销暂存：git reset \u003c commit_id|HEAD \u003e \u003c file \u003ereset 不但有仓库回滚的效果，还可以指定某个版本的文件进行回滚。 git commit 提交一个文件，其实就是将 git 的 HEAD 标签移动到指定的文件快照的id，所以 git reset 其实就是将该 HEAD 标签移动到之前标签的动作。 git reset 是撤销暂存区数据的一种方式。 ==删除当前暂存区内容== 新文件提交到暂存区 powershell git rm --cached \u003cfile\u003e\r文件已提交本地仓库，工作目录对文件进行修改后，提交到暂存区 powershell git reset HEAD \u003cfile\u003e\r回滚版本库的文件 powershell git reset \u003ccommit_id\u003e \u003cfile\u003e\r","date":"2024-06-08","objectID":"/quick-start-git/:7:2","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#272-撤销暂存git-reset--commit_idhead---file-"},{"categories":["代码配置管理"],"content":"\r2.7.3 撤销修改：git checkout \u003c commit_id|HEAD \u003e – \u003c file_name \u003egit checkout \u003ccommit_id|HEAD\u003e – \u003cfile_name\u003e 工作区还原：如果没有 \u003ccommit_id|HEAD\u003e，将暂存区内容覆盖工作目录，add后的文件修改还原 上次 commit 还原：\u003c HEAD \u003e 表示将上一次 commit 中的文件覆盖暂存区和工作目录，commit后的文件修改还原 指定 commit 还原：\u003c commit_id \u003e 表示将指定 commit 中的文件覆盖暂存区和工作目录，commit 后的文件修改还原 ","date":"2024-06-08","objectID":"/quick-start-git/:7:3","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#273-撤销修改git-checkout--commit_idhead------file_name-"},{"categories":["代码配置管理"],"content":"\r2.8 对象级别撤销 reset：将一系列的提交记录取消（不保存历史提交记录） git reset –soft \u003c commit_id \u003e：只将本地仓库回滚到之前的版本，暂存区和工作目录不发生变化 git reset –mixed \u003c commit_id \u003e：将本地仓库和暂存区回滚到之前的版本，工作目录不发生变化 git reset –hard \u003c commit_id \u003e：将本地仓库、暂存区和工作目录同时回滚到之前的版本 revert：将指定 commit_id 中的新增文件，在本次提交中删除，对历史的提交记录不受影响。 git revert \u003c commit_id \u003e reflog + checkout：在找不到历史版本记录的情况下，回滚到之前的版本 方法一：1.使用 reflog 查找所有历史记录，找到 \u003c commit_id \u003e；2.使用 git checkout \u003c commit_id \u003e 切换到对应的版本，并创建分支 git checkout -b temp；3.使用 git checkout master 切换回 master 分支，并使用 git merge temp 合并分支。 方法二：git reset –hard \u003c commit_id\u003e ","date":"2024-06-08","objectID":"/quick-start-git/:8:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#28-对象级别撤销"},{"categories":["代码配置管理"],"content":"\r2.9 忽略git在提交文件时，有三种方法对特殊文件进行过滤： 本地仓库 .git/info/exclude 指定工作目录 .gitignore 项目全局 .gitignore .gitignore 来源于 github 开源项目，项目地址：https://github.com/github/gitignore ==忽略优先级：（从高到低）== 命令级别：git add –ignore-removal 当前工作目录下的 .gitignore 上一级工作目录下的 .gitignore 当前项目目录下的 .git/info/exclude 全局配置中的忽略规则：git config –global –\u003e ~/.gitconfig powershell # 查看忽略的文件 git ls-files --others git ls-files --others --exclude-from=.git/info/exclude\r==忽略规则失效的原因== 被忽略的文件已经在暂存区 被忽略的文件已经提交到本地仓库 ","date":"2024-06-08","objectID":"/quick-start-git/:9:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#29-忽略"},{"categories":["代码配置管理"],"content":"\r3 远程仓库","date":"2024-06-08","objectID":"/quick-start-git/:0:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#3-远程仓库"},{"categories":["代码配置管理"],"content":"\r3.1 查看和创建 查看远程仓库的基本信息，origin是远程仓库地址的别名 powershell git config --list git remote -v\r","date":"2024-06-08","objectID":"/quick-start-git/:1:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#31-查看和创建"},{"categories":["代码配置管理"],"content":"\r3.2 远程仓库部署","date":"2024-06-08","objectID":"/quick-start-git/:2:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#32-远程仓库部署"},{"categories":["代码配置管理"],"content":"\r3.2.1 基本环境 远程主机上创建 git 用户，安装 ssh powershell useradd -m git passwd git\r跨主机免密码认证 powershell # 创建密钥 ssh-keygen -t rsa # 远程主机上传公钥 mkdir /home/git/.ssh /home/git/.ssh/authorized_keys vim /etc/ssh/sshd_config # 重启 ssh 服务 /etc/init.d/ssh restart\r创建远程仓库 powershell # 安装 git 工具 mkdir /data/git -p \u0026\u0026 cd /data/git git init --bare repo_name.git\r权限配置 powershell # 修改仓库属性为 git 用户专用 chown git.git -R repo_name.git # 修改 /etc/passwd 文件设置 git 用户不允许登陆 shell vim /etc/passwd\r","date":"2024-06-08","objectID":"/quick-start-git/:2:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#321-基本环境"},{"categories":["代码配置管理"],"content":"\r3.3 远程仓库管理","date":"2024-06-08","objectID":"/quick-start-git/:3:0","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#33-远程仓库管理"},{"categories":["代码配置管理"],"content":"\r3.3.1 添加远程仓库\rpowershell git remote add \u003clocal_name\u003e [repo_url]\r","date":"2024-06-08","objectID":"/quick-start-git/:3:1","series":null,"tags":["Git"],"title":"Git 快速开始","uri":"/quick-start-git/#331-添加远程仓库"},{"categories":["个人博客"],"content":"\r🚀 在博文中优雅地插入图片 🚀 本文参考： Cassius’s Blog（采取随 markdown 源文件一起存储的方法在博文中插入图片） ","date":"2024-06-08","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/:0:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 插入图片","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/#center-在博文中优雅地插入图片-center"},{"categories":["个人博客"],"content":"\r创建文章使用以下命令，创建一个新的博文目录，以及名为 index.md 的 markdown 文件，同时在博文目录下创建一个用于存放图片的目录 pics/。 text hugo new posts/new-post-name/index.md cd new-post-name mkdir pics\r","date":"2024-06-08","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/:1:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 插入图片","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/#创建文章"},{"categories":["个人博客"],"content":"\r插入图片 使用 markdown 命令在文章中插入图片 markdown ![示例图片](pics/example.png)\r使用 HTML 在文章中插入图片 html \u003cimg src=\"pics/example.png\" alt=\"示例图片\" /\u003e\r","date":"2024-06-08","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/:2:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 插入图片","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/#插入图片"},{"categories":["个人博客"],"content":"\r添加图注使用 Hugo 提供的 shortcodes 在插入图片同时添加图注： text # 删除代码中的两个反斜杠\"\\\" \\{\\{\u003c figure src=\"pics/example.png\" width=\"80%\" title=\"示例图片\" \u003e}}\r示例图片 ","date":"2024-06-08","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/:3:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 插入图片","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/#添加图注"},{"categories":["个人博客"],"content":"\r🚀 Hosting on Github Pages 🚀 本文参考： Hugo快速开始中文文档 | 如何使用Hugo搭建博客并上传至GitHub ","date":"2024-06-02","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/:0:0","series":null,"tags":["Hugo","Blog","Github Pages"],"title":"Hugo博客 5分钟托管至Github","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/#center-hosting-on-github-pages-center"},{"categories":["个人博客"],"content":"\r第一步：初始化本地仓库站点my_hugo_site目录下的public文件夹中存放了整个博客的所有静态页面。 命令行进入../my_hugo_site/public目录。 初始化git仓库：git init 将当前目录下所有文件添加至暂存区：git add . 将暂存区内所有文件提交至本地仓库：git commit -m \"init\" ","date":"2024-06-02","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/:1:0","series":null,"tags":["Hugo","Blog","Github Pages"],"title":"Hugo博客 5分钟托管至Github","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/#第一步初始化本地仓库"},{"categories":["个人博客"],"content":"\r第二步：将本地仓库添加至Github 安装 GitHub Desktop 打开 GitHub Desktop，选择\"File \u003e Add local repository\"，选择my_hugo_site所在路径，点击\"Add repository\"。 点击\"Publish repository\"，填写 Name 和 Description，再次点击\"Publish repository\"即可将本地仓库同步至Github。 ❗❗❗ 注意 Name 必须为Github用户名+.github.io，例如本人Github用户名为\"naturebear\"，则填写内容为：naturebear.github.io ❗❗❗ 注意不要勾选 Keep this code private 浏览器访问 Github，查看仓库是否已上传成功。 ","date":"2024-06-02","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/:2:0","series":null,"tags":["Hugo","Blog","Github Pages"],"title":"Hugo博客 5分钟托管至Github","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/#第二步将本地仓库添加至github"},{"categories":["个人博客"],"content":"\r第三步：配置 Github Pages 服务 进入博客仓库，选择\"Settings \u003e Pages\"，在 Branch 中选择 master，点击 save 保存。 ","date":"2024-06-02","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/:3:0","series":null,"tags":["Hugo","Blog","Github Pages"],"title":"Hugo博客 5分钟托管至Github","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/#第三步配置-github-pages-服务"},{"categories":["个人博客"],"content":"\r第四步：在浏览器中输入 仓库名 访问自己的博客 🎉🎉🎉","date":"2024-06-02","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/:4:0","series":null,"tags":["Hugo","Blog","Github Pages"],"title":"Hugo博客 5分钟托管至Github","uri":"/hugo%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3github/#第四步在浏览器中输入-仓库名httpsnaturebeargithubio-访问自己的博客-"},{"categories":["个人博客"],"content":"\r🚀 Hugo Quick Start 🚀 本文参考： Hugo快速开始中文文档 ","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#center-hugo-quick-start-center"},{"categories":["个人博客"],"content":"\r第一步：安装Hugo 下载所需操作系统对应的版本，本文以windows为例，因此下载 hugo_extended_0.126.2_windows-amd64.zip。 其他操作系统下载链接：Hugo releases 将第一步下载的文件解压到所需安装的目录。例如本文将Hugo解压至C:\\softwares\\hugo目录下。 将第二步中\"hugo.exe\"所在路径（即C:\\softwares\\hugo）添加至系统环境变量。 win+R，输入cmd，在命令行中输入hugo version，如果命令行输出以下内容则安装成功。 hugo v0.126.2-8f3d902ce51512931f5759e9279d93e346c9e649+extended windows/amd64 BuildDate=2024-05-30T15:19:22Z VendorInfo=gohugoio ","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#第一步安装hugo"},{"categories":["个人博客"],"content":"\r第二步：创建站点 进入需要存放站点文件的目录。例如本文将站点存放于C:\\Users\\xiong\\Desktop\\Hugo，因此： 打开cmd进入站点存放目录：cd C:\\Users\\xiong\\Desktop\\Hugo 使用hugo创建新的站点：hugo new site my_hugo_site 进入新创建的站点目录：cd my_hugo_site 查看站点目录结构如下：dir bash ▸ archetypes/ ▸ content/ ▸ data/ ▸ layouts/ ▸ static/ hugo.toml\r","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#第二步创建站点"},{"categories":["个人博客"],"content":"\r第三步：新建文章 确保当前处于my_hugo_site站点目录下 使用hugo创建文章内容页面：hugo new posts/about.md 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性draft: true, 设置属性draft: false或者为hugo命令添加-D/--buildDrafts参数. 使用任意编辑器打开aboud.md，写入一些内容： markdown 🎉 欢迎来到我的个人博客！\r","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#第三步新建文章"},{"categories":["个人博客"],"content":"\r第四步：安装主题 本文以 DoIt 主题为例，安装其他主题可参考 Hugo主题列表。 确保当前处于my_hugo_site站点目录下，下载 DoIt 主题：git clone https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt ","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#第四步安装主题"},{"categories":["个人博客"],"content":"\r第五步：运行调试 修改 hugo.toml 文件为以下内容： text baseURL = \"http://example.org/\" # 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 站点标题 title = \"博客熊\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"DoIt\"\r确保当前处于my_hugo_site站点目录下，执行：hugo server -D --disableFastRender 添加--disableFastRender参数来实时预览你正在编辑的文章页面. 打开浏览器，访问 localhost:1313 即可查看文章。 ","date":"2024-06-01","objectID":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","series":null,"tags":["Hugo","Blog"],"title":"Hugo博客 10分钟搭建个人博客","uri":"/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#第五步运行调试"},{"categories":null,"content":"\r🎉 欢迎来到我的个人博客！","date":"2024-06-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于博客熊","uri":"/about/#center-欢迎来到我的个人博客center"},{"categories":null,"content":"\r博客熊这个小小的网络空间创建于2024年6月1日，旨在记录学习心得、分享阅读体验，并偶尔探讨一些我认为有趣或有价值的话题。 ","date":"2024-06-01","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于博客熊","uri":"/about/#博客熊"},{"categories":null,"content":"\r技术栈本博客是基于 Hugo 搭建而成的，这是一个快速且现代的静态网站生成器，它使得构建和维护博客变得异常简单。我选择了 DoIt 主题，这是一个功能丰富且设计优雅的主题，为博客提供了良好的阅读体验和灵活的配置选项。 博客的源代码和内容都托管在 GitHub 上，这是一个全球性的代码托管平台，允许我方便地管理和部署博客内容。通过 GitHub，您也可以参与到博客的建设中来，无论是提出问题、建议还是贡献内容，都非常欢迎。 ","date":"2024-06-01","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于博客熊","uri":"/about/#技术栈"},{"categories":null,"content":"\r免责声明本博客的内容仅代表个人观点，不代表任何组织或机构的立场。我会尽我所能确保信息的准确性，但无法保证内容的绝对正确或完全无误。所有信息仅供参考，读者在使用任何信息时应自行判断其适用性。 此外，本博客中可能包含第三方网站的链接，这些链接仅为方便读者查阅更多信息，并不代表我对其内容的认可或负责。我对于这些外部网站的内容、隐私政策或做法不承担任何责任。 最后，本博客的内容受版权保护，如果您喜欢我的文章并希望分享，请确保在复制转发时注明出处，并链接到原文页面。 感谢您的访问，希望我的博客能为您带来一些启发和帮助。如果您有任何建议或问题，欢迎随时通过首页邮箱与我交流。 ","date":"2024-06-01","objectID":"/about/:3:0","series":null,"tags":null,"title":"关于博客熊","uri":"/about/#免责声明"}]